{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Foundations of Programming!","text":"<p>This is a temporary website you'll use to access the worksheet for the Foundations of Programming course in the fall of 2025. You can get started under the heading Chapters in the navigation bar above.</p> <p>I've included as many instructions as possible to try to make programming more approachable, but note there are some subchapters that are optional. In those cases it will be noted in the subchapter title.</p>"},{"location":"chapter-1-setup/","title":"Chapter 1 - Setup","text":""},{"location":"chapter-1-setup/#11-mini-chapter-systems-architecture-optional-chapter","title":"1.1 Mini Chapter: Systems Architecture (optional chapter)","text":"<p>You don't have to read this chapter, though if you run into issues installing software, this may be a good place to look.</p> <p>In most of the installation guides, I will refer to x64, ARM64 and possibly some other architectures. The short version is, if you download software made for a different one than your system, it may not work. For many of you, this will probably not be an issue, but in case things don't work, this may be worth checking.</p> <p>You can check your system in the following ways:</p> <ul> <li>Windows<ul> <li>Alternative 1: The visual way<ul> <li>Go to settings, then the About section.</li> <li>Under device specifications you should see device type, which will say what you're using.</li> </ul> </li> <li>Alternative 2: The cool way<ul> <li>Open up Windows Powershell and run <code>Get-ComputerInfo | findstr \"CsSystemType\"</code><ul> <li>Alternatively, you can use <code>systeminfo | findstr /C:\"System Type</code></li> </ul> </li> <li>This should print the systemtype you have.</li> </ul> </li> </ul> </li> <li>Mac<ul> <li>If you run <code>uname -m</code> it should print the system type you use e.g: arm64</li> </ul> </li> <li>Linux<ul> <li>If you run <code>uname -m</code> it should print the system type you use e.g: x86_64.</li> </ul> </li> </ul> <p>x64? ARM? Legs? What does he mean?</p>"},{"location":"chapter-1-setup/#12-tools","title":"1.2 Tools","text":"<p>Listed below are some of the tools we will use throughout the course and how to install them. They include the chosen code editor VSCode, Git, NodeJS and some extensions we will need for VSCode. While there are other alternatives one might use, these were chosen due to popularity of use in the industry.</p>"},{"location":"chapter-1-setup/#121-vscode","title":"1.2.1 VSCode","text":"<p>This is the code editor you'll be using for this entire course (and often while doing web development in general). Keep in mind it is not a full IDE (integrated development environment) so we'll need a few extra things to really get started.</p> <p>You'll find the download link here for most platforms: Download VSCode</p> <p>Choose one that is appropriate for your computer (the largest download buttons should also work):</p> <ul> <li>Windows<ul> <li>Most likely, you have x64, if you want the simplest version choose the User Installer System.</li> </ul> </li> <li>Linux<ul> <li>This depends on your distro, but if you use Linux you probably know ;)</li> </ul> </li> <li>Mac<ul> <li>Assuming the \"big\" download button doesn't work, it might depend on your CPU. Assuming it doesn't work, try the Intel version (since I am under the impression most have Apple Silicon).</li> </ul> </li> </ul> <p>Once you've downloaded it and traversed through the guides, you need somewhere to put your code. Create a folder somewhere on your computer (e.g. inside of Documents) and name it something appropriate (not \"New Folder\"):</p> <p></p> <p>Enter it via VSCode (menu should be in the top left):</p> <p></p> <p>Now you have somewhere to put all your code and your projects. My suggestion for most assignments is to divide assignments into either separate files or entirely separate folders. This will make it easier for you to find them later.</p>"},{"location":"chapter-1-setup/#122-git","title":"1.2.2 Git","text":"<p>This version control software is integral later in the course (and for any future programming you do), so ensure the install works from the very beginning.</p> <p>You'll find the download link here for most platforms: Download Git</p> <ul> <li>Windows<ul> <li>Download the latest x64 version featured at the top (or via the standalone installer), unless you happen to have ARM64.</li> <li>Test that it works via either CMD or Windows Powershell and write: <code>git --version</code>. Hopefully it should print the current git version, which means you've succeeded.</li> </ul> </li> <li>Linux<ul> <li>Git should already be installed</li> <li>But if it isn't, it will depend on your distro.</li> <li>Test that it works via your chosen terminal and write: \u007f<code>git --version</code>. Hopefully it should print the current git version, which means you've succeeded.</li> </ul> </li> <li>Mac<ul> <li>Alternative 1: Apple Store<ul> <li>Apple should ship a version of Git on their store. Download it and it should work.</li> </ul> </li> <li>Alternative 2: Terminal<ul> <li>Apple ships git via XCode, their tools for development</li> <li>On your Mac, search for Terminal.</li> <li>Inside of the terminal, paste this: <code>xcode-select --install</code> and click enter.</li> </ul> </li> <li>Test that it works via the Terminal app on Mac and write: <code>git --version</code>. Hopefully it should print the current git version, which means you've succeeded.</li> </ul> </li> </ul>"},{"location":"chapter-1-setup/#123-nodejs","title":"1.2.3 NodeJS","text":"<p>NodeJS is a JavaScript runtime environment that will let us run JavaScript inside of our VSCode setup. You'll also be using it later in web development courses.</p> <p>You'll find the download link here for most platforms: Download NodeJS</p> <p>I suggest going for the prebuilt Node.js packages found a little further down the page, here: </p> <ul> <li>Windows<ul> <li>I suggest getting the prebuilt Node.js package with system architecture fitting your computer's specifications.</li> <li>Should be rather simple via a provided Windows Installer.</li> <li>Test that it works via either CMD or Windows Powershell and write: <code>node --version</code>. Hopefully it should print the current node version, which means you've succeeded.</li> </ul> </li> <li>Linux<ul> <li>Should be available on your distro's package manager, if not there is a standalone binary file you could use.</li> <li>Test that it works via your chosen terminal and write: <code>node --version</code>. Hopefully it should print the current node version, which means you've succeeded.</li> </ul> </li> <li>Mac<ul> <li>I suggest getting the prebuilt Node.js package with system architecture fitting your computer's specifications.</li> <li>Should be rather simple via a provided macOS Installer.</li> <li>Test that it works via your Terminal app on Mac and write: <code>node --version</code>. Hopefully it should print the current node version, which means you've succeeded.</li> </ul> </li> </ul> <p>Now that you have node, you can actually run any JavaScript files on your computer using the command <code>node &lt;yourFile&gt;</code> in your terminal. This is quite tedious though, and not something I immediately want you to think too much about, so we'll install an extension runner later to avoid it.</p>"},{"location":"chapter-1-setup/#124-github-desktop","title":"1.2.4 Github Desktop","text":"<p>Github Desktop is a software that will make interactions with Github easier for those who may not be well acquainted with using git and want an easier way to get started as compared to the command-line.</p> <p>You'll find the link here for Windows &amp; Mac: Download Github Desktop</p> <p>Once you've downloaded it, try opening it up to see if it works!</p>"},{"location":"chapter-1-setup/#125-the-nuclear-option","title":"1.2.5 The nuclear option","text":"<p>Assuming nothing works for one reason or another, there are a few online JavaScript editors which will allow you to get started on tasks:</p> <ul> <li>p5js online editor<ul> <li>By removing the draw and setup functions (blank textbox), you can use it as a \"normal\" code editor.</li> <li>Allows you to save projects if you are signed up</li> <li>DOES work for p5js code.</li> </ul> </li> <li>Programiz<ul> <li>Simple enough and allows you to run standard JavaScript code</li> <li>Will NOT work for p5js code.</li> </ul> </li> <li>The Console<ul> <li>In the absolute worst case scenario, code can be written in a separate environment and pasted in the console of any browser.</li> <li>Will NOT work for p5js code.</li> <li>If you are unfamiliar with it, I can showcase an example.<ul> <li>This is truly the absolute worst case scenario and should not be considered an option.</li> </ul> </li> </ul> </li> </ul> <p>While browser-based code editors like these are easy to get started in, they are seldom used in true development environments, which is why we'll avoid them for the most part.</p>"},{"location":"chapter-1-setup/#13-extensions","title":"1.3 Extensions","text":"<p>There are some extensions in VSCode we will require to make everything work. These are found under the extensions tab to the left in VSCode (assuming standard settings):</p> <p></p> <p>You simply search for extensions and install them! They may include anything including e.g. highlighters, themes (such as Catppuccin in my case), framework support etc. I recommend installing ones with a certain amount of installs / stars though, as there may be suspicious code in some of them.</p>"},{"location":"chapter-1-setup/#131-prettier","title":"1.3.1 Prettier","text":"<p>Search up prettier on VSCode extensions and install.</p> <p>Prettier is a code formatter we will use for a consistent code style. Once you've searched for it and installed it (should be first in the list, about 60.000.000 installs):</p> <p></p> <p>Now that it is installed, go to your settings (bottom right): </p> <p>Search for formatter in the settings search bar and change the default formatter to Prettier. Make sure to also enable Format on Save.</p>"},{"location":"chapter-1-setup/#132-p5js-extension","title":"1.3.2 P5JS Extension","text":"<p>In order to write p5js code in our own editor, we'll be using an extension created by the previous teacher of the course, Garrit. Search up p5js garrit on VSCode extensions and install the one highlighted below:</p> <p></p> <p>Open / create any JavaScript file using VSCode. You should note a small button/icon close to the bottom left corner:</p> <p></p> <p>If you press it, a canvas should appear in a separate window. It will automatically run your code without the use of NodeJS or the next extension runner (see below). This is in large part due to p5js re-running code constantly, but this extension will be the default tool for your p5js assignments.</p>"},{"location":"chapter-1-setup/#133-runner","title":"1.3.3 Runner","text":"<p>A small extension purely for our own quality of life. Search for runner jun han on VSCode extensions and install install what should be the top one:</p> <p></p> <p>Once installed, you should note a small \"play\" button near the top right corner of VSCode. Pressing the button while inside of a JavaScript file will use our previously installed NodeJS to execute the code in a nice and easy way. Wonderful for learning basic programming logic or just testing a code snippet without using the browser.</p>"},{"location":"chapter-1-setup/#14-task-types","title":"1.4 Task Types","text":"<p>Not all tasks in this worksheet will be problem solving tasks. Some will include examples where you merely type the code into your own editor to understand what is happening when the code runs. This is especially true for the beginning of the worksheet, as a strong fundamental understanding is required before tackling the more complex tasks. Don't skip these tasks! Writing code on your own and taking a moment to understand it will further your understanding far more than copying with no thought. I also strongly urge you to change minor details in these tasks to familiarize yourself with what might work and what might not.</p>"},{"location":"chapter-1-setup/#15-hello-world","title":"1.5 Hello World!","text":"<p>Let's create a simple beginner script to print \"Hello World\" for us to see if the development environment works. Open up VSCode and choose a folder (directory) to work in. In this new folder, create a new file called <code>helloWorld.js</code> (you can make one via the new file button to the left).</p> <p></p> <p>Write the following lines in your editor and run the code via the play button we have via the runner extension:</p> JavaScript<pre><code>console.log(\"Hello World!\");\n</code></pre> <p>Assuming everything is installed correctly, a terminal should display the text \"Hello World!\". Once you've made sure it works, try changing something in the line, save and run the program again. You'll most likely run into an error (which is good!). Fix the error, save, and re-run the program. Try this a few different times to see what errors you manage to get and try to decipher what they mean.</p>"},{"location":"chapter-1-setup/#16-testing-prettier","title":"1.6 Testing Prettier","text":"<p>In the same file <code>helloWorld.js</code>, add the following lines (with spacing as is):</p> JavaScript<pre><code>console.log(1);\n        console.log(2);\n    console.log(3);\n</code></pre> <p>Notice how the spacing is different for each line? Technically the interpreter/compiler won't mind, but to programmers this is extremely important for bug fixing and consistency. Assuming your Prettier extension works and has been set up properly, the file should automatically format when saved (ctrl/command + s usually). Note that even if you have auto save enabled, Prettier requires a manual save to auto format.</p>"},{"location":"chapter-2-variables-functions/","title":"Chapter 2 - Variables & Functions","text":"<p>This chapter will mainly focus on getting used to variables and functions. Using only values and variables does not make for very interesting tasks, therefore we will include functions in the same chapter.</p> <p>So far, you've used <code>console.log()</code> to print things from your program without an explanation of what it really is. It is a function built into JavaScript that we can call on to print things, but now it is time we build our own functions.</p> <p>Note</p> <p>Recall that // is a comment and will not be run as code. In tasks during the coming chapters, you will encounter // Write your code here!, which means I expect you to implement the function. Also please note that the file needs to end with .js. This is very important, as it will not be recognized as JavaScript without it.</p>"},{"location":"chapter-2-variables-functions/#21-basic-functions","title":"2.1 Basic functions","text":""},{"location":"chapter-2-variables-functions/#211-count-to-three","title":"2.1.1 Count to Three","text":"<p>Remember how you've previously used this:  JavaScript<pre><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\n</code></pre></p> <p>I'd now like you to input that into a function so that we could reuse all those lines of code. Create a function using <code>console.log()</code> to print 1, 2, 3 like before, replacing the <code>// Write your code here!</code> below with the console logs from above.  JavaScript<pre><code>function countToThree(){\n    // Write your code here!\n}\n</code></pre></p> <p>Once you're done, save and run the code... nothing will happen. Because to run the code, you need to call the function:</p> JavaScript<pre><code>function countToThree(){\n    // Write your code here!\n}\n\ncountToThree(); // This one!\n</code></pre> <p>Now you should see 1, 2, 3 (on separate lines) in your terminal!</p>"},{"location":"chapter-2-variables-functions/#212-count-to-four","title":"2.1.2 Count to Four","text":"<p>Now let's assume we want to create a program that writes 1, 2, 3, 4 instead. We could write the same function <code>countToThree()</code> again, add a fourth log and rename it <code>countToFour()</code>. That would be inefficient though, as we've already done a majority of the work in <code>countToThree()</code>. Therefore we will reuse it.</p> JavaScript<pre><code>function countToFour(){\n    // Write your code here!\n}\n</code></pre> <p>Change the code above so that it counts all the way to four by doing the following:</p> <ul> <li>Add a function call to <code>countToThree()</code> from inside <code>countToFour()</code>.</li> <li>Make <code>countToFour()</code> print a 4 using <code>console.log()</code> after the call to <code>countToThree()</code>.</li> <li>Call the <code>countToFour()</code> function!</li> </ul>"},{"location":"chapter-2-variables-functions/#22-variables-in-functions","title":"2.2 Variables in functions","text":""},{"location":"chapter-2-variables-functions/#221-the-pythagorean-theorem","title":"2.2.1 The Pythagorean Theorem","text":"<p>Don't worry, we won't deep dive into mathematics in this course, but it makes for a good example in this case. We'll be writing everything inside of a function for the coming task, but there will be explanations. According to the Pythagorean theorem, in a right triangle, the square of the length of the hypotenuse is equal to the sum of the squares on the lengths of the other two sides. This can be expressed via the formula:</p> <p>\\(a^2+b^2=c^2\\)</p> <p>We will be using it to determine the length of the hypotenuse in a given triangle:</p> <p>\\({\\sqrt {a^2 + b^2}} = {\\sqrt {c^2}}\\)</p> <p>Below is one way to write the function for a triangle with the side lengths 3 and 4.</p> JavaScript<pre><code>function calculateHypotenuse() {\n\u00a0 let a = 3;\n\u00a0 let b = 4;\n\u00a0 \n\u00a0 let aSquared = a * a;\n\u00a0 let bSquared = b * b;\n\u00a0 \n\u00a0 let cSquared = aSquared + bSquared;\n\u00a0 let c = Math.sqrt(cSquared);\n\n\u00a0 console.log(\"a is \" + a + \" and b is \" + b);\n\u00a0 console.log(\"The sum of the squared variables is \" + cSquared);\n\n\u00a0 console.log(\"The hypotenuse therefore has the length of: \" + c);\n\n}\n</code></pre> <p>Explanation:</p> <ul> <li>The function introduces the first variables <code>a</code> and <code>b</code>, initiating them with values 3 and 4.</li> <li>We then create new variables for the squared values of a and b with appropriate naming, such as <code>aSquared</code> containing the value 9.</li> <li>Towards the end, we calculate c via <code>Math.sqrt()</code>, providing us with the square root of <code>cSquared</code>. <ul> <li><code>Math.sqrt()</code> is another function provided by JavaScript.</li> <li>We could just as easily have used the power of operator to replace <code>Math.sqrt()</code> in this case.</li> </ul> </li> <li>Finally, the <code>console.log()</code> mixes strings and numbers to present us with the result.</li> <li>Try calling the function!</li> </ul>"},{"location":"chapter-2-variables-functions/#222-using-parameters-and-arguments","title":"2.2.2 Using parameters and arguments","text":"<p>In the previous implementation of <code>calculateHypotenuse()</code>, we always calculate the same triangle. Therefore, we will change the current to use parameters, allowing the caller to provide us the values for a and b. Let's also get rid of some unnecessary variables.</p> JavaScript<pre><code>function calculateHypotenuse(a, b) {\n\u00a0 let cSquared = a*a + b*b;\n\u00a0 let c = Math.sqrt(cSquared);\n\n\u00a0 console.log(\"a is \" + a + \" and b is \" + b);\n\u00a0 console.log(\"The sum of the squared variables is \" + cSquared);\n\u00a0 console.log(\"The hypotenuse therefore has the length of: \" + c);\n}\n</code></pre> <p>Since we have modified the function to now include function parameters, we can call the function like this:</p> JavaScript<pre><code>calculateHypotenuse(1, 2);\n\nconst x = 1;\nconst y = 2;\ncalculateHypotenuse(x, y);\n\nconst a = 2;\nconst b = 3;\ncalculateHypotenuse(b, a); \n// Notice how we switched? if not, look at the function above\n</code></pre> <p>Make sure to study the printed text to make sure you understand what happens. </p> <p>Some things to make special note of: - The first function call uses <code>a = 1</code> and <code>b = 2</code>. - The second function call uses the values of variables x and y     - once again calling the function with <code>a = 1</code> and <code>b = 2</code> - The third function call uses values of variables a and b     - calling the function with a = 3 and b = 2     - The reason being that the variables declared outside of the function are completely separate from the variables declared outside. Variables only exist in their local scope where they are declared.</p>"},{"location":"chapter-2-variables-functions/#223-returning-a-value","title":"2.2.3 Returning a value","text":"<p>In the next version of this function, we will add <code>return c;</code> to the very bottom. This will enable us to use the value calculated by the function to do something else later:</p> JavaScript<pre><code>function calculateHypotenuse(a, b) {\n\u00a0 let cSquared = a*a + b*b;\n\u00a0 let c = Math.sqrt(cSquared);\n\n\u00a0 console.log(\"a is \" + a + \" and b is \" + b);\n\u00a0 console.log(\"The sum of the squared variables is \" + cSquared);\n\u00a0 console.log(\"The hypotenuse therefore has the length of: \" + c);\n\u00a0 \n\u00a0 return c;\n}\n\n\nlet length = calculateHypotenuse(1, 2);\nconsole.log(\"The length of the hypotenuse is \" + length);\n</code></pre> <p>By using return c, we can now access the value outside of the function.</p>"},{"location":"chapter-2-variables-functions/#224-making-the-function-clean","title":"2.2.4 Making the function clean","text":"JavaScript<pre><code>function calculateHypotenuse(a, b) {\n\u00a0 let cSquared = a*a + b*b;\n\u00a0 let c = Math.sqrt(cSquared);\u00a0 \n\u00a0 return c;\n}\n\n\nlet length = calculateHypotenuse(1, 2);\nconsole.log(\"The length of the hypotenuse is \" + length);\n</code></pre> <p>When programming, you should try to aim for clean functions. In those cases, it is easier to test them and to reuse them (e.g. have the function give you the value and to print it separately). Keep in mind, functions should also be as easy to read as possible. </p> <p>Below is an alternative implementation of <code>calculateHypotenuse(a, b)</code> using the standard function syntax:</p> JavaScript<pre><code>function calculateHypotenuse(a, b) {\u00a0 \n\u00a0 return Math.sqrt(a*a + b*b);\n}\n</code></pre> <p>Another variant using an arrow function:</p> JavaScript<pre><code>calculateHypotenuse = (a, b) =&gt; Math.sqrt(a*a + b*b);\n</code></pre>"},{"location":"chapter-2-variables-functions/#23-tasks-functions-variables","title":"2.3 Tasks (functions &amp; variables)","text":""},{"location":"chapter-2-variables-functions/#231-program-printfullname","title":"2.3.1 Program printFullName","text":"<p>Make a simple program that takes two parameters: <code>firstName</code> and <code>lastName</code>. Return the person's full name so that it prints like this: JavaScript<pre><code>let fullName = printFullName(\"Linus\",\"Sonnerhed\");\nconsole.log(fullName);\n// Prints: Linus Sonnerhed\n</code></pre></p>"},{"location":"chapter-2-variables-functions/#232-improve-the-function","title":"2.3.2 Improve the function","text":"<p>This function isn't very clean, nor could we reuse it if the variables were different. Re-write or refactor the function to improve it. JavaScript<pre><code>function calculateSleep(){\n    var lightSleepHours = 5;\n    var deepSleepHours = 2;\n    console.log(lightSleepHours + deepSleepHours);\n}\n</code></pre></p>"},{"location":"chapter-2-variables-functions/#233-program-turn-order","title":"2.3.3 Program turn-order","text":"<p>Let's assume there are a number of people playing something similar to UNO, where you can force other players to skip their turns. If this variant of UNO allowed multiple skips, it may be hard to know whose turn it really is.</p> <p>Since each player has a turn order they start with, we can use numbers to represent them (1,2,3) and use that as input for a function, as well as whose turn it is before the skips and how many skips there are:</p> JavaScript<pre><code>function getTurnOrder(totalPlayers, currentTurn, skipAmount){\n    // Write your code here!\n}\n</code></pre> <p>Given the total amount of players, whose current turn it is (player 1, 2 or 3 etc.) and how many turns we want to skip, return whose turn it is supposed to be, e.g: JavaScript<pre><code>let currentTurn = getTurnOrder(3, 1, 4);\nconsole.log(currentTurn); // Prints 2, now we know it is player 2's turn!\n</code></pre></p> <p>The function will not be a perfect representation since it is flawed, a number of skips evenly divisible by the amount of players will result in 0. This could be fixed using a conditional, but we'll talk about those later.</p> <p>Tips:</p> <ul> <li>There may be a use for the modulus operator (<code>%</code>) in this case...</li> </ul>"},{"location":"chapter-2-variables-functions/#234-program-calculatebookcost","title":"2.3.4 Program calculateBookCost","text":"<p>Sometimes buying books for hundreds of SEK may feel expensive (especially as a computer science student for which much material can be found for free). As a coping mechanism, one may consider calculating the cost per hour of reading, to make it more bearable.</p> <p>Below, write a function that calculates the cost of a book over a certain amount of time. Have the function include parameters for:</p> <ul> <li>How much the book will cost?</li> <li>How many pages the book has?</li> <li>How many percent of the book do you intend to read?</li> <li>How many minutes does it take to read and understand a page?</li> </ul> <p>Finally, have the function print the final calculation. </p> <p>Example print: Text Only<pre><code>You're expected to dedicate ca 82.1 hours to this book.\nThe book is therefore calculated to cost you 6.25 SEK/h.\n</code></pre> (print above is based on: cost being 513 SEK, 657 pages, reading 50% of them, 15 minutes to understand a page)</p> <p>Some tips:</p> <ul> <li>Add some parameters with easily understood names, e.g. <code>bookCost</code>, <code>pageCount</code>, <code>readPercent</code>, <code>comprehensionTime</code> (in minutes)</li> <li>Add a variable <code>totalHours</code> and initiate it with the correct value on the same line.</li> <li>Print the cost of the book per hour!<ul> <li>If you want to make it look prettier, use <code>.toFixed(2)</code> on a variable to set a two decimal accuracy, e.g. <code>bookCost.toFixed(2)</code></li> </ul> </li> </ul>"},{"location":"chapter-2-variables-functions/#235-change-calculation","title":"2.3.5 Change Calculation","text":"<p>Let's assume you're working at a coffeeshop and need a quick way to calculate change. There are coins and bills of these values: 500, 200, 100, 20, 10, 5, 2, 1. If you call the function which you are about to create, <code>printChange(947)</code>, it should print the following:</p> Bash<pre><code>947 is:\n1 x 500\n2 x 200\n0 x 100\n2 x 20\n0 x 10\n1 x 5\n1 x 2\n0 x 1\n</code></pre> <p>This task will not require a clean function.</p> <p>JavaScript<pre><code>function printChange(totalPrice){\n    // Write your code here!\n}\n</code></pre> Tips:</p> <ul> <li> <p>Try to keep the calculation simple without too much math. Here's a suggestion for the first three lines of the program: JavaScript<pre><code>let remainingChange = totalPrice;\nlet number500s = Math.floor(remainingChange / 500);\nremainingChange -= number500s * 500;\n</code></pre></p> </li> <li> <p><code>Math.floor()</code> is useful for achieving division via whole numbers (integer division).</p> <ul> <li>This is not necessary in some languages, as integers and floats are wholly separate data types.</li> </ul> </li> </ul>"},{"location":"chapter-3-conditionals/","title":"Chapter 3 - Conditionals","text":""},{"location":"chapter-3-conditionals/#31-booleans-and-logical-expressions","title":"3.1. Booleans and logical expressions","text":"<p>A variable of the type boolean only has the values true and false. Note the code below with some examples using booleans:</p> JavaScript<pre><code>let likesDogs = true;\nconst likesSpiders = false;\n\nlet bodyTemp = 39;\nlet hasFever = (bodyTemp &gt;= 37);\n</code></pre> <p>Strive to give the boolean variables names that describe what is true or false. If you use any of the comparison operators, the result will be a boolean value (such as the example of <code>hasFever</code> above). Using logical operators (<code>&amp;&amp;</code> - and, <code>||</code> - or, <code>!</code> - not), you can combine multiple boolean values:</p> JavaScript<pre><code>let isDog = true;\nlet isCat = true;\n\nlet isCanine = isDog &amp;&amp; !isCat;\n</code></pre> <p>It is worth noting that logical expressions are calculated from left to right and that no obviously unnecessary calculations are made. For example:</p> JavaScript<pre><code>let isCanine = isDog &amp;&amp; !isCat;\n</code></pre> <p>For <code>isCanine</code> to get the value of true, <code>isDog</code> has to be true and <code>isCat</code> has to be false. Assuming <code>isDog</code> isn't true, we no longer need to check whether the animal is not a cat. This is known as a short-circuit evaluation.</p> <p>Similarly, when using the logical operator or, <code>||</code>: JavaScript<pre><code>let isCanine = isDog || isWolf;\n</code></pre></p> <p>Here either <code>isDog</code> or <code>isWolf</code> need to be true for <code>isCanine</code> to be true. Therefore, checking from left to right, if <code>isDog</code> is true there is no need to calculate <code>isWolf</code>.</p> <p>Test it out with these functions and try to predict what they will print:</p> JavaScript<pre><code>function t1(){\n    console.log(\"t1\");\n    return true;\n}\n\n\nfunction t2(){\n    console.log(\"t2\");\n    return true;\n}\n\n\nfunction f1(){\n    console.log(\"f1\");\n    return true;\n}\n\n\nfunction f2(){\n    console.log(\"f2\");\n    return true;\n}\n\n\nfunction testBooleans(){\n    console.log(\"Testing booleans!\");\n\n    let b = t1() &amp;&amp; (t2() || f1());\n    console.log(\"Results 1 for b \" + b);\n\n    b = t1() || t2() || f1();\n    console.log(\"Results 2 for b \" + b);\n\n    b = f1() || (t2() &amp;&amp; (f1() || f2()));\n}\n</code></pre>"},{"location":"chapter-3-conditionals/#32-boolean-coercion","title":"3.2 Boolean coercion","text":"<p>In JavaScript, we don't always have to use explicit booleans for expressions to be evauluated. Several built-in operations that expect booleans first coerce their arguments to booleans. These are summarized as follows:</p> <ul> <li>Booleans are returned as-is</li> <li>undefined turns into false</li> <li>null turns into false</li> <li>0, -0 and NaN turn into false; other numbers into true<ul> <li>Even negative ones!</li> </ul> </li> <li>0n turns into false; other BigInts turn into true</li> <li>An empty string \"\" turns into false; other strings turn into true</li> <li>Symbols turn into true</li> <li>All objects become true.</li> </ul> <p>There are only a handful of values that are coerced into false, called falsy values, while the rest are coerced into true, called truthy values. You can achieve the same effect in JavaScript in two ways:</p> <ul> <li>Using double NOT <code>!!x</code>, negates the value x twice, converting it into a boolean</li> <li>The Boolean() function: <code>Boolean(x)</code> converts x into a boolean in the same way as above.</li> </ul>"},{"location":"chapter-3-conditionals/#33-if-else-statements","title":"3.3. if / else statements","text":"<p>The if and else statements allow you to execute code based on conditions. An if statement consists of a boolean expression, written inside of parentheses and some code to be executed if the expression results to true. Else is used when that statement isn't true.</p> JavaScript<pre><code>if(isCanine){\n    // Do something only if true!\n} else {\n    // It wasn't true, do something else!\n}\n</code></pre> <p>Which can of course be expanded into more complex functionality: JavaScript<pre><code>let isLoggedIn = true;\nlet isAdmin = false;\n\nif(isLoggedIn){\n    if(isAdmin)\n        showAdminDashboard();\n    else \n        showUserDashboard();\n\n} else {\n    showLogin();\n}\n</code></pre></p>"},{"location":"chapter-3-conditionals/#34-tasks-if-else","title":"3.4 Tasks (if / else)","text":""},{"location":"chapter-3-conditionals/#341-age-check","title":"3.4.1 Age Check","text":"<p>Implement a function that takes three boolean arguments:</p> <ul> <li>Age</li> <li>Passport</li> <li>ID</li> </ul> <p>Using if-statements, create the function <code>canLegallyDrink</code>, which first checks if their age is 18 or above, as well as whether they have either a passport or ID to prove it. </p> <p>Experiment with nesting if-else statements, as well as using logical expressions! JavaScript<pre><code>function canLegallyDrink(age, hasPassport, hasID) {\n    if(age &gt;= 18){\n        if(hasPassport || hasID){\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n</code></pre></p>"},{"location":"chapter-3-conditionals/#342-a-potentially-stealthy-bug","title":"3.4.2 A potentially stealthy bug","text":"<p>In the function below, there are is a fairly common error that might be hard to spot. Correct it!</p> JavaScript<pre><code>let a = 2 + 2 + 2 + 2;\nlet b = 4;\n\nfunction calculateAverage(sum, numbers) {\n\u00a0 \u00a0 if (sum &amp; numbers) {\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"This is: \" + sum / numbers);\n\u00a0 \u00a0 } else {\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"I can't calculate this!\");\n\u00a0 \u00a0 }\n}\n\ncalculateAverage(a, b);\n</code></pre>"},{"location":"chapter-3-conditionals/#343-if-else-string-concatenation","title":"3.4.3 if-else string concatenation","text":"<p>Let's practice some conditionals. We want to receive some number n, then create a string depending on what it is divisible by. In this case, we'll only check whether it is divisible by 3, 5 or both. If it is divisible by 3, add \"Fizzle \" to the string. If divisible by 5, add the string \"Pop \". If divisible by both 3 and 5, add only \"FizzlePop \". </p> <p>Tips:</p> <ul> <li>Use if and if-else statements, they'll be very helpful.</li> <li>Consider if there is an operator that could check whether something is divisible by a certain number.</li> </ul>"},{"location":"chapter-3-conditionals/#35-switch-statements","title":"3.5 switch statements","text":"<p>Let's imagine we have a variable called fruit. It's a string variable containing the name of a fruit, and we want to print something special depending on what type of fruit it is. We could write if statements: JavaScript<pre><code>if(fruit === \"Papaya\"){\n    console.log(\"It is a Papaya!\");\n} else if(fruit === \"Orange\"){\n    console.log(\"It is an Orange!\");\n}\n...\n</code></pre></p> <p>But this would take a long time and would be quite repetitive. While the repetition in this case might be hard to avoid, we can employ a different method to better match the fruit against a string and print something specific via the switch statement.</p> <p>The switch statement similarly allows code execution based on conditions. It evaluates an expression, matching the value against a series of case clauses, and executes statements where the case clause has a matching value, until a break statement is encountered. If there is no match, it will use a default clause. </p> <p>This may seem confusing, but observe the example below: JavaScript<pre><code>const fruit = \"Papaya\";\n\nswitch (fruit) {\n\u00a0 case \"Orange\":\n\u00a0 \u00a0 console.log(\"It is an Orange!\");\n\u00a0 \u00a0 break;\n\n\u00a0 case \"Mango\":\n\u00a0 \u00a0 console.log(\"It is a Mango!\");\n\u00a0 \u00a0 break;\n\n\u00a0 case \"Papaya\":\n\u00a0 \u00a0 console.log(\"It is a Papaya!\");\n\u00a0 \u00a0 break;\n\n\u00a0 case \"Durian\":\n\u00a0 \u00a0 console.log(\"It is Durian!\");\n\u00a0 \u00a0 break;\n\n\u00a0 default:\n\u00a0 \u00a0 console.log(\"What fruit is that?\");\n\u00a0 \u00a0 break;\n\n}\n</code></pre></p> <p>Like before, we are trying to match the value of our fruit variable to some fruit name in string format. Here's how it works:</p> <ul> <li>We input the expression we want to compare, in this case the fruit variable and the value <code>\"Papaya\"</code>.</li> <li>The switch statement starts from the first case, <code>\"Orange\"</code> and performs a strict equality comparison <code>===</code></li> <li>As it returns false, the switch statement keeps proceeding downwards, comparing each case expression (in this case fruit strings) against our fruit variable value.</li> <li>Finally, we reach the case <code>\"Papaya\"</code>, which evaluates to true, they are the same. The code below is then executed, printing <code>\"It is a Papaya!\"</code>.</li> <li>Since we don't want the switch statement to continue, we use the break statement to stop it from comparing further (or alternatively a return or continue statement).</li> </ul> <p>Assuming we don't stop it using break, execution will proceed to the next case clause, even to the default clause, regardless of whether that clause's expression matches. This is called fall-through. Try the example below:</p> JavaScript<pre><code>const fruit = \"Papaya\";\n\nswitch (fruit) {\n\u00a0 case \"Orange\":\n\u00a0 \u00a0 console.log(\"It is an Orange!\");\n\u00a0 \u00a0 break;\n\n\u00a0 case \"Mango\":\n\u00a0 \u00a0 console.log(\"It is a Mango!\");\n\u00a0 \u00a0 break;\n\n\u00a0 case \"Papaya\":\n\u00a0 \u00a0 console.log(\"It is a Papaya!\");\n\n\u00a0 case \"Durian\":\n\u00a0 \u00a0 console.log(\"It is Durian!\");\n\n\u00a0 default:\n\u00a0 \u00a0 console.log(\"What fruit is that?\");\n\u00a0 \u00a0 break;\n\n}\n</code></pre> <p>We get three prints, which may not be intended. We can however take advantage of fall-through in case multiple conditions are supposed to result in the same code execution:</p> JavaScript<pre><code>const animal = \"Cow\";\n\nswitch (animal) {\n\u00a0 \u00a0 case \"Cow\":\n\u00a0 \u00a0 case \"Pig\":\n\u00a0 \u00a0 case \"Chicken\":\n\u00a0 \u00a0 case \"Sheep\":\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"It is a farm animal!\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 default:\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"Does this animal belong on a farm?\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n}\n</code></pre> <p>In this case, any of the farm animal cases result in the same console log, while unhandled cases are handled via the default clause. </p> <p>It is noteworthy that default does not need to be placed last, and may also trigger a fall-through:</p> JavaScript<pre><code>const animal = \"Space Cow\";\n\nswitch (animal) {\n    default:\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"Does this animal belong on a farm?\");\n\u00a0 \u00a0 case \"Cow\":\n\u00a0 \u00a0 case \"Pig\":\n\u00a0 \u00a0 case \"Chicken\":\n\u00a0 \u00a0 case \"Sheep\":\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"It is a farm animal!\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n}\n</code></pre> <p>For more complex use, for instance when replacing if...else and with intent to use fall-through, one could also employ a <code>switch(true)</code> pattern:</p> JavaScript<pre><code>switch (true) {\n  case isSquare(shape):\n    console.log(\"This shape is a square.\");\n    // Fall-through, since a square is a rectangle as well!\n\n  case isRectangle(shape):\n    console.log(\"This shape is a rectangle.\");\n\n  case isQuadrilateral(shape):\n    console.log(\"This shape is a quadrilateral.\");\n    break;\n\n  case isCircle(shape):\n    console.log(\"This shape is a circle.\");\n    break;\n}\n</code></pre>"},{"location":"chapter-3-conditionals/#36-tasks-switch","title":"3.6 Tasks (switch)","text":""},{"location":"chapter-3-conditionals/#361-categories-of-food","title":"3.6.1 Categories of food","text":"<p>Convert the following function from using if-else to using switch: JavaScript<pre><code>function getFoodCategory(food){\n    if(food === \"Rice\"){\n        return \"Starch\";\n    } else if(food === \"Apple\"){\n        return \"Fruit\";\n    } else if(food === \"Broccoli\"){\n        return \"Vegetable\";\n    } else if(food === \"Chicken\"){\n        return \"Protein\";\n    } else {\n        return \"Food category unknown\";\n    }\n}\n</code></pre></p>"},{"location":"chapter-3-conditionals/#362-switch-string-concatenation","title":"3.6.2 switch string concatenation","text":"<p>Remember the if-else string concatenation task using if and if-else statements? Try to reconstruct it using a switch statement instead. JavaScript<pre><code>// This is one solution to the issue:\nfunction fizzlePop(n){\n    let ans = \"\";\n    switch(true){\n        case (n % 5 === 0) &amp;&amp; (n % 3 === 0):\n             ans += \"FizzlePop \";\n        case n % 5:\n            ans += \"Pop \";\n        case n % 3:\n            ans += \"Fizzle \";\n    }\n}\n</code></pre> Tips:</p> <ul> <li>Using switch(true) may be worth considering.</li> </ul>"}]}